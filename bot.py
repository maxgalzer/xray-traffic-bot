import sqlite3
import os
import threading
import time
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext

# ==== –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ====
DB_PATH = "/opt/xray-traffic-bot/db/traffic.db"
ALERTS_PATH = "/opt/xray-traffic-bot/db/alerts.txt"
CONFIG_PATH = "/opt/xray-traffic-bot/db/config.txt"

# ==== –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ====
with open(CONFIG_PATH, "r") as f:
    TELEGRAM_TOKEN = f.readline().strip()
    CHAT_ID = f.readline().strip()
    CRON_HOURS = int(f.readline().strip())

# ==== SQLite ====
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()

# ==== –ê–ª–µ—Ä—Ç—ã ====
def load_alert_domains():
    if not os.path.exists(ALERTS_PATH):
        return set()
    with open(ALERTS_PATH, "r") as f:
        return set(line.strip().lower() for line in f if line.strip())

alert_domains = load_alert_domains()
alert_enabled = True

# ==== –ö–æ–º–∞–Ω–¥—ã ====

def start(update: Update, context: CallbackContext):
    commands = (
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "/alertOn ‚Äì –≤–∫–ª—é—á–∏—Ç—å –∞–ª–µ—Ä—Ç—ã\n"
        "/alertOff ‚Äì –≤—ã–∫–ª—é—á–∏—Ç—å –∞–ª–µ—Ä—Ç—ã\n"
        "/list ‚Äì —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤\n"
        "/add <–¥–æ–º–µ–Ω> ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω –≤ —Å–ø–∏—Å–æ–∫\n"
        "/delete <–¥–æ–º–µ–Ω> ‚Äì —É–¥–∞–ª–∏—Ç—å –¥–æ–º–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "/find <–¥–æ–º–µ–Ω> ‚Äì –∫—Ç–æ –∏ –∫–æ–≥–¥–∞ –ø–æ—Å–µ—â–∞–ª\n"
        "/summary ‚Äì –ø—Ä–∏—Å–ª–∞—Ç—å —Å–≤–æ–¥–∫—É –∑–∞ 6 —á–∞—Å–æ–≤\n"
        "/setcron <—á–∞—Å—ã> ‚Äì –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–æ–¥–∫–∏\n"
    )
    update.message.reply_text(commands, parse_mode='Markdown')

def alert_on(update: Update, context: CallbackContext):
    global alert_enabled
    alert_enabled = True
    update.message.reply_text("‚úÖ –ê–ª–µ—Ä—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã.")

def alert_off(update: Update, context: CallbackContext):
    global alert_enabled
    alert_enabled = False
    update.message.reply_text("‚úÖ –ê–ª–µ—Ä—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

def list_domains(update: Update, context: CallbackContext):
    domains = load_alert_domains()
    if domains:
        update.message.reply_text("üìå –°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤:\n" + "\n".join(domains))
    else:
        update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ –ø—É—Å—Ç.")

def add_domain(update: Update, context: CallbackContext):
    if not context.args:
        update.message.reply_text("‚ùó –£–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω: /add example.com")
        return
    domain = context.args[0].strip().lower()
    with open(ALERTS_PATH, "a") as f:
        f.write(domain + "\n")
    update.message.reply_text(f"‚úÖ –î–æ–º–µ–Ω `{domain}` –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.", parse_mode='Markdown')

def delete_domain(update: Update, context: CallbackContext):
    if not context.args:
        update.message.reply_text("‚ùó –£–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω: /delete example.com")
        return
    domain = context.args[0].strip().lower()
    domains = load_alert_domains()
    if domain in domains:
        domains.remove(domain)
        with open(ALERTS_PATH, "w") as f:
            for d in domains:
                f.write(d + "\n")
        update.message.reply_text(f"üóë –î–æ–º–µ–Ω `{domain}` —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.", parse_mode='Markdown')
    else:
        update.message.reply_text(f"‚ùå –î–æ–º–µ–Ω `{domain}` –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode='Markdown')

def find_domain(update: Update, context: CallbackContext):
    if not context.args:
        update.message.reply_text("‚ùó –£–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω: /find example.com")
        return
    domain = context.args[0].strip().lower()
    cursor.execute("SELECT timestamp, client, inbound FROM logs WHERE domain = ? ORDER BY timestamp DESC LIMIT 10", (domain,))
    results = cursor.fetchall()
    if results:
        response = f"üîé –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏—è `{domain}`:\n\n"
        for ts, client, inbound in results:
            response += f"üïí {ts}\nüë§ {client}\nüì• {inbound}\n\n"
    else:
        response = f"‚ùå `{domain}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–≥–∞—Ö."
    update.message.reply_text(response, parse_mode='Markdown')

def summary(update: Update, context: CallbackContext):
    now = datetime.utcnow()
    since = now - timedelta(hours=6)
    cursor.execute("SELECT timestamp, client, inbound, domain FROM logs WHERE timestamp >= ?", (since.strftime("%Y-%m-%d %H:%M:%S"),))
    results = cursor.fetchall()
    if results:
        response = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (6—á):\n\n"
        for ts, client, inbound, domain in results:
            response += f"üïí {ts}\nüë§ {client}\nüì• {inbound}\nüåê {domain}\n\n"
    else:
        response = "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤."
    update.message.reply_text(response)

def set_cron(update: Update, context: CallbackContext):
    global CRON_HOURS
    if not context.args:
        update.message.reply_text("‚ùó –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤: /setcron 3")
        return
    try:
        hours = int(context.args[0])
        if hours <= 0:
            raise ValueError
        CRON_HOURS = hours
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        with open(CONFIG_PATH, "w") as f:
            f.write(f"{TELEGRAM_TOKEN}\n{CHAT_ID}\n{CRON_HOURS}")
        update.message.reply_text(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∫—Ä–æ–Ω-—Å–≤–æ–¥–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –∫–∞–∂–¥—ã–µ {CRON_HOURS} —á.")
    except:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /setcron 4")

# ==== –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ ====
def alert_loop():
    last_checked = datetime.utcnow() - timedelta(seconds=60)
    while True:
        time.sleep(30)
        if not alert_enabled:
            continue
        since = datetime.utcnow() - timedelta(minutes=10)
        cursor.execute("SELECT timestamp, client, inbound, domain FROM logs WHERE timestamp >= ?", (since.strftime("%Y-%m-%d %H:%M:%S"),))
        rows = cursor.fetchall()
        domains = load_alert_domains()
        for ts, client, inbound, domain in rows:
            if domain.lower() in domains:
                message = f"‚ö†Ô∏è –ê–ª–µ—Ä—Ç!\n\nüïí {ts}\nüë§ {client}\nüì• {inbound}\nüåê {domain}"
                context.bot.send_message(chat_id=CHAT_ID, text=message)

# ==== –ó–∞–ø—É—Å–∫ ====
if __name__ == '__main__':
    updater = Updater(token=TELEGRAM_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("alertOn", alert_on))
    dispatcher.add_handler(CommandHandler("alertOff", alert_off))
    dispatcher.add_handler(CommandHandler("list", list_domains))
    dispatcher.add_handler(CommandHandler("add", add_domain))
    dispatcher.add_handler(CommandHandler("delete", delete_domain))
    dispatcher.add_handler(CommandHandler("find", find_domain))
    dispatcher.add_handler(CommandHandler("summary", summary))
    dispatcher.add_handler(CommandHandler("setcron", set_cron))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–ª–µ—Ä—Ç-—Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
    context = updater.bot
    threading.Thread(target=alert_loop, daemon=True).start()

    updater.start_polling()
    updater.idle()
